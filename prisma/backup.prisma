generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Account {
  id       Bytes       @id @db.Binary(16)
  email    String      @unique @db.VarChar(100)
  password String      @db.VarChar(100)
  role     AccountRole
  name     String      @db.VarChar(255)

  payment         Payment?
  ratings         Rating[]
  seats           PickSeat[]
  comments        Comment[]       @relation("CommentToAccount")
  manager_account ManagerAccount?
  user_account    UserAccount?

  @@map("Account")
}

model UserAccount {
  id         Bytes @id @db.Binary(16)
  account_id Bytes @unique @db.Binary(16)

  account Account @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("UserAccount")
}

model ManagerAccount {
  id         Bytes @id @db.Binary(16)
  account_id Bytes @unique @db.Binary(16)

  account Account  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cinemas Cinema[]

  @@map("ManagerAccount")
}

model Item {
  id        Bytes  @id @db.Binary(16)
  name      String @db.VarChar(255)
  amount    Float
  discount  Float  @default(0)
  parent_id Bytes? @db.Binary(16)

  parent   Item?             @relation("ItemSystem", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items    Item[]            @relation("ItemSystem")
  payments ItemsOnPayments[]

  @@map("Item")
}

model Tag {
  id   Bytes  @id @db.Binary(16)
  name String @db.VarChar(255)

  films FilmsOnTags[]

  @@map("Tag")
}

model Film {
  id             Bytes    @id @db.Binary(16)
  title          String   @db.VarChar(255)
  director       String   @db.VarChar(50)
  description    String   @db.Text
  release_date   DateTime @db.Timestamp(0)
  country        String   @db.VarChar(50)
  restrict_age   Int      @default(0)
  duration       Int
  picture_url    String   @db.VarChar(2083)
  background_url String   @db.VarChar(2083)
  trailer_url    String   @db.VarChar(2083)
  language       String   @db.VarChar(50)

  ratings  Rating[]      @relation("RatingToFilm")
  tags     FilmsOnTags[]
  comments Comment[]     @relation("CommentToFilm")
  performs Perform[]

  @@map("Film")
}

model PickSeat {
  id         Bytes  @id @db.Binary(16)
  account_id Bytes  @db.Binary(16)
  perform_id Bytes  @db.Binary(16)
  code       String @db.VarChar(50)

  account Account @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  perform Perform @relation(fields: [perform_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Comment because we will handle seat & payment at application layer, not database
  // @@unique([perform_id, code]) // Same seat can't be picked twice by same user
  @@map("PickSeat")
}

model Perform {
  id             Bytes                @id @db.Binary(16)
  film_id        Bytes                @db.Binary(16)
  cinema_room_id Bytes                @db.Binary(16)
  start_time     DateTime             @db.Timestamp(0)
  end_time       DateTime             @db.Timestamp(0)
  translate_type PerformTranslateType @default(value: NONE)
  view_type      PerformViewType      @default(value: V2D)
  price          Float

  film     Film       @relation(fields: [film_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  room     CinemaRoom @relation(fields: [cinema_room_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seats    PickSeat[]
  payments Payment[]

  @@map("Perform")
}

model Payment {
  id           Bytes         @id @db.Binary(16)
  account_id   Bytes         @unique @db.Binary(16)
  perform_id   Bytes         @db.Binary(16)
  date_created DateTime      @default(now()) @db.Timestamp(0)
  date_expired DateTime      @db.Timestamp(0)
  status       PaymentStatus @default(value: PENDING)

  account Account           @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  perform Perform           @relation(fields: [perform_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  items   ItemsOnPayments[]

  @@map("Payment")
}

model CinemaProvider {
  id             Bytes  @id @db.Binary(16)
  name           String @db.VarChar(50)
  logo_url       String @db.VarChar(2083)
  background_url String @db.VarChar(2083)

  rating  Rating[] @relation("RatingToCinemaProvider")
  cinemas Cinema[]

  @@map("CinemaProvider")
}

model Cinema {
  id          Bytes  @id @db.Binary(16)
  name        String @db.VarChar(50)
  provider_id Bytes  @db.Binary(16)
  manager_id  Bytes  @db.Binary(16)
  address     String @db.VarChar(255)

  rooms    CinemaRoom[]
  provider CinemaProvider @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  manager  ManagerAccount @relation(fields: [manager_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Cinema")
}

model CinemaRoom {
  id               Bytes          @id @db.Binary(16)
  name             String         @db.VarChar(255)
  type             CinemaRoomType
  cinema_id        Bytes          @db.Binary(16)
  cinema_layout_id Bytes          @db.Binary(16)

  cinema        Cinema       @relation(fields: [cinema_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cinema_layout CinemaLayout @relation(fields: [cinema_layout_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  performs      Perform[]

  @@map("CinemaRoom")
}

model CinemaLayout {
  id   Bytes            @id @db.Binary(16)
  type CinemaLayoutType
  data String           @db.Text

  cinema_rooms CinemaRoom[]

  @@map("CinemaLayout")
}

model Comment {
  id      Bytes       @id @db.Binary(16)
  dest_id Bytes       @db.Binary(16)
  body    String      @db.VarChar(250)
  type    CommentType

  ratings      Rating[] @relation("RatingToComment")
  dest_account Account  @relation("CommentToAccount", map: "Comment_dest_account_fkey", fields: [dest_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dest_film    Film     @relation("CommentToFilm", map: "Comment_dest_film_fkey", fields: [dest_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Comment")
}

model Rating {
  id         Bytes      @id @db.Binary(16)
  account_id Bytes      @db.Binary(16)
  dest_id    Bytes      @db.Binary(16)
  type       RatingType
  score      Float

  account              Account        @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dest_cinema_provider CinemaProvider @relation("RatingToCinemaProvider", map: "Rating_dest_cinema_provider_fkey", fields: [dest_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dest_film            Film           @relation("RatingToFilm", map: "Rating_dest_film_fkey", fields: [dest_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dest_comment         Comment        @relation("RatingToComment", map: "Rating_dest_comment_fkey", fields: [dest_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([account_id, dest_id])
}

model FilmsOnTags {
  film_id Bytes @db.Binary(16)
  tag_id  Bytes @db.Binary(16)

  film Film @relation(fields: [film_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag  Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([film_id, tag_id])
  @@map("_FilmTag")
}

model ItemsOnPayments {
  item_id    Bytes @db.Binary(16)
  payment_id Bytes @db.Binary(16)

  item    Item    @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payment Payment @relation(fields: [payment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([item_id, payment_id])
  @@map("_ItemPayment")
}

enum CinemaRoomType {
  NORMAL
  VIP
  DELUXE
}

enum CinemaLayoutType {
  RECTANGLE
  DYNAMIC
}

enum CommentType {
  FILM
  ACCOUNT
  COMMENT
}

enum AccountRole {
  USER
  MANAGER
  SUPERADMIN
}

enum PaymentStatus {
  PENDING
  RESOLVED
}

enum PerformTranslateType {
  SUBTITLE
  DUBBING
  NONE
}

enum PerformViewType {
  V2D
  V3D
  IMAX
}

enum RatingType {
  FILM
  CINEMA
  COMMENT
}
